조 이름 : 16조
 
#역할
조원 :  통계학과 20212086 소연우
   역할 : ms azure과 putty를 이용하여 외부서버 구현, 영상 편집
 
         통계학과 20212196 이혜슬
   역할 :  다른 버전의 코드 구상 및 작성, 영상 편집

         수학과 20202279 박송원     	
   역할 : 외부서버 aws를 이용한 putty연결. 제출 코드 작성. 설명용 영상 촬영.
 
#프로그램 구성요소 :
-서버 
class MATRIX : 
행과 열의 정보를 받아 처리하는 클래스
def __init__(self)
>> 행렬의 곱셈 연산의 결과를 저장할 0으로 이루어진 행렬 6개 생성
      result_matrix_(클라이언트 숫자 두개)
 def decide_matrix(self, row_cli, col_cli, result, x, y) 
>> 클라이언트에게서 받은 행, 열 곱셈의 result를 행, 열을 보낸 클라이언트의 이름 정보인 row_cli와 col_cli를 이용해 맞는 자리에 저장.
def IsMatrixFull(self): 
>> 생성시 0으로 이루어져있던 결과 행렬들이 0이 아닌 값으로 이루어진다면 1을 반환. 100 round를 실행하고 종료하기 위한 종료조건을 위함.
def PrintMatrix
>> 100 round를 종료하고 난 후 결과 행렬들을 출력하기 위한 함수

class SERVER : 
def accept_client(self)
>> 서버를 실행한 후 각 클라이언트와 연결. socket과 thread를 이용함.

def handle_client(self)
>> 각 클라이언트들과 실질적인 데이터 주고받는 함수.
      클라이언트들의 이름과 소켓 정보를 저장하는 리스트 clients에 4개의 클라이언트가 접속한다면, clients 리스트에서 짝을 지어 make_clients_pair 리스트에 저장한다. (예를 들어 (1,2), (1,3), (1,4), (2,3), (2,4), (3,4)
그리고 반복문을 실행하여 짝 들 중 하나를 추출한 select_pair을 select_clients 리스트에 저장하고, 리스트를 오름차순으로 정렬하여 숫자가 작은 클라이언트가 행, 숫자가 큰 클라이언트가 열을 전송하도록 지정하였다. 그리고 선택된 두 클라이언트를 제외한 클라이언트들을 calc_clients 리스트에 저장하고 그들 중 하나를 선택하여 계산할 클라이언트를 추출한다. 추출하는 값들은 모두 랜덤으로 추출한다.
짝으로 결정된 두 클라이언트 중 숫자가 작은 클라이언트에게 행을 보내라고 요청한 후, 받은 행의 정보를 계산할 클라이언트에게 전송한다. 열을 보낼 클라이언트도 마찬가지로 요청을 한 후 받은 열의 정보를 계산할 클라이언트에게 전송한다.
계산한 클라이언트가 보내온 결과값을 정수로 변환한 후, 결과 행렬의 제자리에 넣는 decide_matrix함수를 이용해 행렬에 넣는다. 이 때 이미 받은 값이라면 중복된 값을 넣지 않기 위해 결과 행렬의 x,y좌표에 있는 값이 받은 결과값과 같으면 행렬에 넣지 않도록 하거나, 결과 행렬의 알맞은 좌표의 값이 아직 0이면 결과값을 넣도록 하는 ‘중복을 방지하기 위한’ 함수를 정의하고 싶었으나 구현하는데 어려움을 겪어 코드에 작성하지는 못하였다.
그리고 마지막으로 결과 행렬이 모두 0이 아닌 값으로 차있는지 알아보기 위한 함수 IsMatrixFull을 이용해 100라운드가 끝나면 연결이 종료되도록 구현하려 하였다.

-클라이언트 
서버에서 오름차순으로 행, 열을 보낼 클라이언트를 정하였기에 클라이언트1은 행만 추출하면 되고, 클라이언트4는 열만 추출하면 되도록 설정하였다.
class MATRIX : 
def make_matrix()
>> 랜덤으로 10*10 크기의 행렬 추출
def pick_row(), def pick_col()
>> 랜덤으로 생성한 행렬에서 랜덤 행, 열 선택 후  행, 열의 인덱스 값과 데이터를 반환
def multiply_and_add
>> 다른 클라이언트에게서 받은 행, 열을 토대로 dot 이용해 결과값 multi_result를 반환
클라이언트, 서버 연결
서버에서 데이터를 받아오고
그 데이터가 row이면 랜덤으로 행을 추출하는 함수를 이용해 행의 정보를 리스트로 만든다. 이 과정에 행의 데이터는 배열이므로 json 모듈을 이용해 변환을 하여 전송한다. 열 또한 마찬가지이다.
받아온 데이터가 row, col이 아닌 다른 클라이언트의 행 또는 열의 정보라면 받은 데이터중 배열의 값을 json이용해 변환한 후 데이터의 정보를 리스트화 시키고 그 리스트의 첫번째 요소가 row인지 col인지에 따라 각각의 리스트에 저장한다. 각 리스트에 하나의 요소가 들어가면 행, 열을 모두 받았기에 계산이 가능하다는 의미이므로 연산하는 multiply_and_add 함수를 이용해 결과를 계산하고 서버로 전송한다.


#소스코드 컴파일방법 : 

#프로그램 실행환경 및 실행방법 :
외부서버 aws를 이용해 putty를 연결하고 코드 실행. 
애저를 이용해 putty를 연결하고 코드 실행.

#Server-Client 및 Client간 synchronization 및 serialization 수행방법 설명
서버에서 다른 클라이언트의 포트 번호를 받아와 클라이언트끼리의 연결하여 행, 열을 전송하는 것이 아닌 서버에 행, 열의 데이터를 전송하고 서버가 연산을 할 클라이언트에게 전달하도록 구현하였다. 영상에서 설명을 하지 못하였다.

#Error or Additional handling :
-같은 행, 열을 뽑아 계산하는 중복을 막기 위해 중복 조건을 넣으려 했으나 작동 되지 않아 주석으로 달아놓음.
-round를 반복하여 빈 결과행렬에 넣는 중 반복문이 정지하였으나 원인을 찾지 못함.(round1 실행 중 정지)
-system clock 수행 실패.
- 종료 조건에서 결과 행렬이 모두 차면 clients 리스트에 있는 클라이언트들에게 ok값을 전송하고, 받은 클라이언트들이 소켓을 종료하면 서버도 연결을 종료한 후 clients 리스트에서 해당 클라이언트를 제거하도록 구현하려 했으나 구현하지 못하였다.

#Additional Comments :
-제출하는 코드 외에 4개의 클라이언트에서 각각의 랜덤 행과 열을 추출하여 한 round에 6개의 계산씩, 총 100 round로 600개의 빈 행렬의 요소를 채우며 계산과 같은 행*열이 추출시 중복 계산 방지 조건을 넣고, 6개의 행렬의 모든 요소가 계산이 끝나면 종료되는 것 까지 구현이 된 코드가 있으나 과제수행 전제조건인 ‘모든 클라이언트는 Thread를 통해 구현되어야한다.’ 가 만족되지 않아 과제로 제출하지 못하였음.
-저희 조는 컴퓨터공학과가 아닌 통계학과 2명과 수학과 1명으로 진행하였습니다.
